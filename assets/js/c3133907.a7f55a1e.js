"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[266],{6348:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"features/environment","title":"Environment Variables","description":"With chayns-toolkit@3 .env-files are automatically loaded depending on the current environment","source":"@site/docs/features/environment.md","sourceDirName":"features","slug":"/features/env-vars","permalink":"/chayns-toolkit/docs/features/env-vars","draft":false,"unlisted":false,"editUrl":"https://github.com/TobitSoftware/chayns-toolkit/edit/main/docs/docs/features/environment.md","tags":[],"version":"current","frontMatter":{"title":"Environment Variables","slug":"env-vars"},"sidebar":"docs","previous":{"title":"ESLint","permalink":"/chayns-toolkit/docs/features/eslint"},"next":{"title":"Dev","permalink":"/chayns-toolkit/docs/commands/dev"}}');var i=t(4848),s=t(8453);const r={title:"Environment Variables",slug:"env-vars"},l=void 0,a={},c=[{value:"Default Variables",id:"default-variables",level:2},{value:"How to Use It Correctly",id:"how-to-use-it-correctly",level:2},{value:"Caveats",id:"caveats",level:2},{value:"Example",id:"example",level:2},{value:"How to Use It Correctly",id:"how-to-use-it-correctly-1",level:2},{value:"Caveats",id:"caveats-1",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["With chayns-toolkit@3 ",(0,i.jsx)(n.code,{children:".env"}),"-files are automatically loaded depending on the current environment\nwhich is defined as ",(0,i.jsx)(n.code,{children:"process.env.BUILD_ENV || (!development ? 'production' : 'development')"}),". This\nwill load up to 4 files, with the files listed at the bottom having higher priority:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:".env\n.env.local\n.env.{environment}\n.env.{environment}.local\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Unlike previous versions only variables starting with ",(0,i.jsx)(n.code,{children:"PUBLIC_"})," are exposed to your app, while\nothers are only available in your toolkit.config.js to modify the config."]}),"\n",(0,i.jsxs)(n.p,{children:["These values can be accessed in your code on the ",(0,i.jsx)(n.code,{children:"process.env"})," or ",(0,i.jsx)(n.code,{children:"import.meta.env"})," namespace:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const API_KEY = process.env.GOOGLE_MAPS_API_KEY\n// or\nconst API_KEY = import.meta.env.GOOGLE_MAPS_API_KEY\n"})}),"\n",(0,i.jsx)(n.h2,{id:"default-variables",children:"Default Variables"}),"\n",(0,i.jsx)(n.p,{children:"The chayns-toolkit will define following variables by default:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"process.env.VERSION"}),"\n",(0,i.jsx)(n.li,{children:"import.meta.env.VERSION"}),"\n",(0,i.jsx)(n.li,{children:"process.env.BUILD_VERSION"}),"\n",(0,i.jsx)(n.li,{children:"import.env.BUILD_VERSION"}),"\n",(0,i.jsx)(n.li,{children:"process.env.BUILD_ENV"}),"\n",(0,i.jsx)(n.li,{children:"import.meta.env.BUILD_ENV"}),"\n",(0,i.jsx)(n.li,{children:"process.env.__PACKAGE_NAME__"}),"\n",(0,i.jsx)(n.li,{children:"import.meta.env.__PACKAGE_NAME__"}),"\n",(0,i.jsx)(n.li,{children:"__REQUIRED_REACT_VERSION__"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Rsbuild also injects some variables by default, for further information check their\n",(0,i.jsx)(n.a,{href:"https://rsbuild.dev/guide/advanced/env-vars#default-variables",children:"documentation"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-it-correctly",children:"How to Use It Correctly"}),"\n",(0,i.jsxs)(n.p,{children:["Keep your ",(0,i.jsx)(n.code,{children:".env*.local"}),"-files in your ",(0,i.jsx)(n.code,{children:".gitignore"})," file and do not push them to source control."]}),"\n",(0,i.jsxs)(n.p,{children:["Set environment variables in your CI/CD solution (e.g. Vercel, TeamCity) directly. Here's a guide on\nhow to do that for\n",(0,i.jsx)(n.a,{href:"https://www.jetbrains.com/help/teamcity/configuring-build-parameters.html",children:"TeamCity"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you want your app to behave differently for each build environment, e.g. use a QA backend when\ndoing QA tests, set ",(0,i.jsx)(n.code,{children:"process.env.BUILD_ENV"})," to ",(0,i.jsx)(n.code,{children:"qa"})," and define a variable in the ",(0,i.jsx)(n.code,{children:".env.qa"}),"-file."]}),"\n",(0,i.jsx)(n.h2,{id:"caveats",children:"Caveats"}),"\n",(0,i.jsxs)(n.p,{children:["During compilation, ",(0,i.jsx)(n.code,{children:"chayns-toolkit"})," will look at your source code and look for places where you\naccess ",(0,i.jsx)(n.code,{children:"process.env"}),". It will then match these places with the available environment variables and\ndo a string replacement if it can find one."]}),"\n",(0,i.jsxs)(n.p,{children:["In other words this means that you cannot access the variables with any other syntax. Only\n",(0,i.jsx)(n.code,{children:"process.env.VAR_NAME"})," will be replaced, but other syntax like ",(0,i.jsx)(n.code,{children:"const { VAR_NAME } = process.env"}),"\nwill not be detected."]}),"\n",(0,i.jsx)(n.p,{children:"\u26a0\ufe0f Unlike in older versions not defined variables will not be replaced anymore and could cause\nruntime errors."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u26a0\ufe0f The content below is only relevant for versions older than 3."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All system environment variables as well as any variables specified in a ",(0,i.jsx)(n.code,{children:".env.local"})," file in the\nroot of your project directory will be available to your code under ",(0,i.jsx)(n.code,{children:"process.env.VAR_NAME"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Starting with version 2.0.12 ",(0,i.jsx)(n.code,{children:".env"}),"-files are also loaded according to the current environment. This\nway up to 4 files can be loaded, with the files listed at the bottom having higher priority."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:".env\n.env.local\n.env.{environment}\n.env.{environment}.local\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Your ",(0,i.jsx)(n.code,{children:".env.local"})," file would look something like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-env",metastring:'title="/.env.local"',children:"GOOGLE_MAPS_API_KEY=1bc29b36f623ba82aaf6724fd3b16718\nOTHER_IMPORTANT_API_KEY=ca794fb2d950acf25c964ecc35f2d7e2\n... other values ...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["These values can be accessed in your code on the ",(0,i.jsx)(n.code,{children:"process.env"})," namespace:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const API_KEY = process.env.GOOGLE_MAPS_API_KEY\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-it-correctly-1",children:"How to Use It Correctly"}),"\n",(0,i.jsxs)(n.p,{children:["Keep your ",(0,i.jsx)(n.code,{children:".env.local"})," in your ",(0,i.jsx)(n.code,{children:".gitignore"})," file and not push it to source control."]}),"\n",(0,i.jsxs)(n.p,{children:["Set environment variables in your CI/CD solution (e.g. Vercel, TeamCity) directly. Here's a guide on\nhow to do that for\n",(0,i.jsx)(n.a,{href:"https://www.jetbrains.com/help/teamcity/configuring-build-parameters.html",children:"TeamCity"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you want your app to behave differently for each build environment, e.g. use a QA backend when\ndoing QA tests, use an environment variable for it (",(0,i.jsx)(n.code,{children:"BUILD_ENV"})," for example). Set a different value\nfor this environment variable for every build environment (",(0,i.jsx)(n.code,{children:"BUILD_ENV=qa"}),", ",(0,i.jsx)(n.code,{children:"BUILD_ENV=production"}),",\netc.)."]}),"\n",(0,i.jsx)(n.h2,{id:"caveats-1",children:"Caveats"}),"\n",(0,i.jsxs)(n.p,{children:["During compilation, ",(0,i.jsx)(n.code,{children:"chayns-toolkit"})," will look at your source code and look for places where you\naccess ",(0,i.jsx)(n.code,{children:"process.env"}),". It will then match these places with the available environment variables and\ndo a string replacement if it can find one."]}),"\n",(0,i.jsxs)(n.p,{children:["In other words this means that you cannot access the variables with any other syntax. Only\n",(0,i.jsx)(n.code,{children:"process.env.VAR_NAME"})," will be replaced, but other syntax like ",(0,i.jsx)(n.code,{children:"const { VAR_NAME } = process.env"}),"\nwill not be detected."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);