"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[266],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),y=c(t),d=o,m=y["".concat(s,".").concat(d)]||y[d]||u[d]||a;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[y]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7488:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(8168),o=(t(6540),t(5680));const a={title:"Environment Variables",slug:"env-vars"},i=void 0,l={unversionedId:"features/environment",id:"features/environment",isDocsHomePage:!1,title:"Environment Variables",description:"With chayns-toolkit@3 .env-files are automatically loaded depending on the current environment",source:"@site/docs/features/environment.md",sourceDirName:"features",slug:"/features/env-vars",permalink:"/chayns-toolkit/docs/features/env-vars",editUrl:"https://github.com/TobitSoftware/chayns-toolkit/edit/main/docs/docs/features/environment.md",version:"current",frontMatter:{title:"Environment Variables",slug:"env-vars"},sidebar:"docs",previous:{title:"ESLint",permalink:"/chayns-toolkit/docs/features/eslint"},next:{title:"Dev",permalink:"/chayns-toolkit/docs/commands/dev"}},s=[{value:"How to Use It Correctly",id:"how-to-use-it-correctly",children:[]},{value:"Caveats",id:"caveats",children:[]},{value:"Example",id:"example",children:[]},{value:"How to Use It Correctly",id:"how-to-use-it-correctly-1",children:[]},{value:"Caveats",id:"caveats-1",children:[]}],c={toc:s},p="wrapper";function y(e){let{components:n,...t}=e;return(0,o.yg)(p,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"With chayns-toolkit@3 ",(0,o.yg)("inlineCode",{parentName:"p"},".env"),"-files are automatically loaded depending on the current environment\nwhich is defined as ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env.BUILD_ENV || (!development ? 'production' : 'development')"),". This\nwill load up to 4 files:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},".env\n.env.{environment}\n.env.local\n.env.{environment}.local\n")),(0,o.yg)("p",null,"Unlike previous versions only variables starting with ",(0,o.yg)("inlineCode",{parentName:"p"},"PUBLIC_")," are exposed to your app, while\nothers are only available in your toolkit.config.js to modify the config."),(0,o.yg)("p",null,"These values can be accessed in your code on the ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"import.meta.env")," namespace:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const API_KEY = process.env.GOOGLE_MAPS_API_KEY\n// or\nconst API_KEY = import.meta.env.GOOGLE_MAPS_API_KEY\n")),(0,o.yg)("h2",{id:"how-to-use-it-correctly"},"How to Use It Correctly"),(0,o.yg)("p",null,"Keep your ",(0,o.yg)("inlineCode",{parentName:"p"},".env*.local"),"-files in your ",(0,o.yg)("inlineCode",{parentName:"p"},".gitignore")," file and do not push them to source control."),(0,o.yg)("p",null,"Set environment variables in your CI/CD solution (e.g. Vercel, TeamCity) directly. Here's a guide on\nhow to do that for\n",(0,o.yg)("a",{parentName:"p",href:"https://www.jetbrains.com/help/teamcity/configuring-build-parameters.html"},"TeamCity"),"."),(0,o.yg)("p",null,"If you want your app to behave differently for each build environment, e.g. use a QA backend when\ndoing QA tests, set ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env.BUILD_ENV")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"qa")," and define a variable in the ",(0,o.yg)("inlineCode",{parentName:"p"},".env.qa"),"-file."),(0,o.yg)("h2",{id:"caveats"},"Caveats"),(0,o.yg)("p",null,"During compilation, ",(0,o.yg)("inlineCode",{parentName:"p"},"chayns-toolkit")," will look at your source code and look for places where you\naccess ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env"),". It will then match these places with the available environment variables and\ndo a string replacement if it can find one."),(0,o.yg)("p",null,"In other words this means that you cannot access the variables with any other syntax. Only\n",(0,o.yg)("inlineCode",{parentName:"p"},"process.env.VAR_NAME")," will be replaced, but other syntax like ",(0,o.yg)("inlineCode",{parentName:"p"},"const { VAR_NAME } = process.env"),"\nwill not be detected."),(0,o.yg)("p",null,"\u26a0\ufe0f Unlike in older versions not defined variables will not be replaced anymore and could cause\nruntime errors."),(0,o.yg)("hr",null),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"\u26a0\ufe0f The content below is only relevant for versions older than 3.")),(0,o.yg)("p",null,"All system environment variables as well as any variables specified in a ",(0,o.yg)("inlineCode",{parentName:"p"},".env.local")," file in the\nroot of your project directory will be available to your code under ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env.VAR_NAME"),"."),(0,o.yg)("p",null,"Starting with version 2.0.12 ",(0,o.yg)("inlineCode",{parentName:"p"},".env"),"-files are also loaded according to the current environment. This\nway up to 4 files can be loaded."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},".env\n.env.{environment}\n.env.local\n.env.{environment}.local\n")),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)("p",null,"Your ",(0,o.yg)("inlineCode",{parentName:"p"},".env.local")," file would look something like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-env",metastring:'title="/.env.local"',title:'"/.env.local"'},"GOOGLE_MAPS_API_KEY=1bc29b36f623ba82aaf6724fd3b16718\nOTHER_IMPORTANT_API_KEY=ca794fb2d950acf25c964ecc35f2d7e2\n... other values ...\n")),(0,o.yg)("p",null,"These values can be accessed in your code on the ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env")," namespace:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"const API_KEY = process.env.GOOGLE_MAPS_API_KEY\n")),(0,o.yg)("h2",{id:"how-to-use-it-correctly-1"},"How to Use It Correctly"),(0,o.yg)("p",null,"Keep your ",(0,o.yg)("inlineCode",{parentName:"p"},".env.local")," in your ",(0,o.yg)("inlineCode",{parentName:"p"},".gitignore")," file and not push it to source control."),(0,o.yg)("p",null,"Set environment variables in your CI/CD solution (e.g. Vercel, TeamCity) directly. Here's a guide on\nhow to do that for\n",(0,o.yg)("a",{parentName:"p",href:"https://www.jetbrains.com/help/teamcity/configuring-build-parameters.html"},"TeamCity"),"."),(0,o.yg)("p",null,"If you want your app to behave differently for each build environment, e.g. use a QA backend when\ndoing QA tests, use an environment variable for it (",(0,o.yg)("inlineCode",{parentName:"p"},"BUILD_ENV")," for example). Set a different value\nfor this environment variable for every build environment (",(0,o.yg)("inlineCode",{parentName:"p"},"BUILD_ENV=qa"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"BUILD_ENV=production"),",\netc.)."),(0,o.yg)("h2",{id:"caveats-1"},"Caveats"),(0,o.yg)("p",null,"During compilation, ",(0,o.yg)("inlineCode",{parentName:"p"},"chayns-toolkit")," will look at your source code and look for places where you\naccess ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env"),". It will then match these places with the available environment variables and\ndo a string replacement if it can find one."),(0,o.yg)("p",null,"In other words this means that you cannot access the variables with any other syntax. Only\n",(0,o.yg)("inlineCode",{parentName:"p"},"process.env.VAR_NAME")," will be replaced, but other syntax like ",(0,o.yg)("inlineCode",{parentName:"p"},"const { VAR_NAME } = process.env"),"\nwill not be detected."))}y.isMDXComponent=!0}}]);